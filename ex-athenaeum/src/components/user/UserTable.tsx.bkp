// import { ChangeEvent, MouseEvent, useEffect, useState } from 'react';
// import { alpha } from '@mui/material/styles';
// import Box from '@mui/material/Box';
// import Table from '@mui/material/Table';
// import TableBody from '@mui/material/TableBody';
// import TableCell from '@mui/material/TableCell';
// import TableContainer from '@mui/material/TableContainer';
// import TableHead from '@mui/material/TableHead';
// import TablePagination from '@mui/material/TablePagination';
// import TableRow from '@mui/material/TableRow';
// import TableSortLabel from '@mui/material/TableSortLabel';
// import Toolbar from '@mui/material/Toolbar';
// import Typography from '@mui/material/Typography';
// import Paper from '@mui/material/Paper';
// import Checkbox from '@mui/material/Checkbox';
// import IconButton from '@mui/material/IconButton';
// import Tooltip from '@mui/material/Tooltip';
// import { visuallyHidden } from '@mui/utils';
// import DeleteIcon from '@mui/icons-material/Delete';
// import FilterListIcon from '@mui/icons-material/FilterList';
// import usePageTitle from '../../hooks/usePageTitle';
// import { User } from '../../models/User';
// import { useAppDispatch, useAppSelector } from '../../store/hooks';
// import { getUsers } from '../../store/user/actions';
// import { useDispatch } from 'react-redux';

// function descendingComparator<T>(a: T, b: T, orderBy: keyof T) {
//     if (b[orderBy] < a[orderBy]) {
//         return -1;
//     }

//     if (b[orderBy] > a[orderBy]) {
//         return 1;
//     }

//     return 0;
// }

// type Order = 'asc' | 'desc';

// function getComparator<Key extends keyof any>(
//     order: Order,
//     orderBy: Key,
// ): (
//         a: { [key in Key]: number | string },
//         b: { [key in Key]: number | string },
//     ) => number {
//     return order === 'desc'
//         ? (a, b) => descendingComparator(a, b, orderBy)
//         : (a, b) => -descendingComparator(a, b, orderBy);
// }

// // This method is created for cross-browser compatibility, if you don't
// // need to support IE11, you can use Array.prototype.sort() directly
// // function stableSort<T>(array: readonly T[], comparator: (a: T, b: T) => number) {
// //     const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);

// //     stabilizedThis.sort((a, b) => {
// //         const order = comparator(a[0], b[0]);
// //         if (order !== 0) {
// //             return order;
// //         }
// //         return a[1] - b[1];
// //     });

// //     return stabilizedThis.map((el) => el[0]);
// // }
// function stableSort<T>(array: readonly T[], comparator: (a: T, b: T) => number) {
//     return array.slice().sort(comparator(order, orderBy))
// }

// interface HeadCell {
//     id: User['id'];
//     disablePadding: boolean;
//     label: string;
//     numeric: boolean;
// }

// const headCells: readonly HeadCell[] = [
//     {
//         id: 'firstName',
//         numeric: false,
//         disablePadding: true,
//         label: 'Dessert (100g serving)',
//     },
//     {
//         id: 'lastName',
//         numeric: true,
//         disablePadding: false,
//         label: 'Calories',
//     },
//     {
//         id: 'email',
//         numeric: true,
//         disablePadding: false,
//         label: 'Fat (g)',
//     },
//     {
//         id: 'dob',
//         numeric: true,
//         disablePadding: false,
//         label: 'Carbs (g)',
//     },
// ];

// interface EnhancedTableProps {
//     numSelected: number;
//     onRequestSort: (event: MouseEvent<unknown>, property: keyof User) => void;
//     onSelectAllClick: (event: ChangeEvent<HTMLInputElement>) => void;
//     order: Order;
//     orderBy: string;
//     rowCount: number;
// }

// function EnhancedTableHead(props: EnhancedTableProps) {
//     const { onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } =
//         props;
//     const createSortHandler =
//         (property: keyof User) => (event: MouseEvent<unknown>) => {
//             onRequestSort(event, property);
//         };

//     return (
//         <TableHead>
//             <TableRow>
//                 <TableCell padding="checkbox">
//                     <Checkbox
//                         color="primary"
//                         indeterminate={numSelected > 0 && numSelected < rowCount}
//                         checked={rowCount > 0 && numSelected === rowCount}
//                         onChange={onSelectAllClick}
//                         inputProps={{
//                             'aria-label': 'select all desserts',
//                         }}
//                     />
//                 </TableCell>
//                 {headCells.map((headCell) => (
//                     <TableCell
//                         key={headCell.id}
//                         align={headCell.numeric ? 'right' : 'left'}
//                         padding={headCell.disablePadding ? 'none' : 'normal'}
//                         sortDirection={orderBy === headCell.id ? order : false}
//                     >
//                         <TableSortLabel
//                             active={orderBy === headCell.id}
//                             direction={orderBy === headCell.id ? order : 'asc'}
//                             onClick={createSortHandler(headCell.id)}
//                         >
//                             {headCell.label}
//                             {orderBy === headCell.id ? (
//                                 <Box component="span" sx={visuallyHidden}>
//                                     {order === 'desc' ? 'sorted descending' : 'sorted ascending'}
//                                 </Box>
//                             ) : null}
//                         </TableSortLabel>
//                     </TableCell>
//                 ))}
//             </TableRow>
//         </TableHead>
//     );
// }

// interface EnhancedTableToolbarProps {
//     numSelected: number;
// }

// const EnhancedTableToolbar = (props: EnhancedTableToolbarProps) => {
//     const { numSelected } = props;

//     usePageTitle('Users');

//     return (
//         <Toolbar
//             sx={{
//                 pl: { sm: 2 },
//                 pr: { xs: 1, sm: 1 },
//                 ...(numSelected > 0 && {
//                     bgcolor: (theme) =>
//                         alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity),
//                 }),
//             }}
//         >
//             {numSelected > 0 ? (
//                 <Typography
//                     sx={{ flex: '1 1 100%' }}
//                     color="inherit"
//                     variant="subtitle1"
//                     component="div"
//                 >
//                     {numSelected} selected
//                 </Typography>
//             ) : (
//                 <Typography
//                     sx={{ flex: '1 1 100%' }}
//                     variant="h6"
//                     id="tableTitle"
//                     component="div"
//                 >
//                     Nutrition
//                 </Typography>
//             )}
//             {numSelected > 0 ? (
//                 <Tooltip title="Delete">
//                     <IconButton>
//                         <DeleteIcon />
//                     </IconButton>
//                 </Tooltip>
//             ) : (
//                 <Tooltip title="Filter list">
//                     <IconButton>
//                         <FilterListIcon />
//                     </IconButton>
//                 </Tooltip>
//             )}
//         </Toolbar>
//     );
// };

// export default function EnhancedTable() {
//     const [order, setOrder] = useState<Order>('asc');
//     const [orderBy, setOrderBy] = useState<keyof User>('firstName');
//     const [selected, setSelected] = useState<readonly string[]>([]);
//     const [page, setPage] = useState(0);
//     const [rowsPerPage, setRowsPerPage] = useState(5);

//     const users = useAppSelector(state => state.user.data);

//     const appDispatch = useAppDispatch();

//     const dispatch = useDispatch();

//     useEffect(() => {
//         dispatch(getUsers());
//     });

//     const handleRequestSort = (
//         event: MouseEvent<unknown>,
//         property: keyof User,
//     ) => {
//         const isAsc = orderBy === property && order === 'asc';
//         setOrder(isAsc ? 'desc' : 'asc');
//         setOrderBy(property);
//     };

//     const handleSelectAllClick = (event: ChangeEvent<HTMLInputElement>) => {
//         if (event.target.checked) {
//             const newSelecteds = users.map(({ id }) => id);
//             setSelected(newSelecteds);
//             return;
//         }
//         setSelected([]);
//     };

//     const handleClick = (event: MouseEvent<unknown>, name: string) => {
//         const selectedIndex = selected.indexOf(name);
//         let newSelected: readonly string[] = [];

//         if (selectedIndex === -1) {
//             newSelected = newSelected.concat(selected, name);
//         } else if (selectedIndex === 0) {
//             newSelected = newSelected.concat(selected.slice(1));
//         } else if (selectedIndex === selected.length - 1) {
//             newSelected = newSelected.concat(selected.slice(0, -1));
//         } else if (selectedIndex > 0) {
//             newSelected = newSelected.concat(
//                 selected.slice(0, selectedIndex),
//                 selected.slice(selectedIndex + 1),
//             );
//         }

//         setSelected(newSelected);
//     };

//     const handleChangePage = (event: unknown, newPage: number) => {
//         setPage(newPage);
//     };

//     const handleChangeRowsPerPage = (event: ChangeEvent<HTMLInputElement>) => {
//         setRowsPerPage(parseInt(event.target.value, 10));
//         setPage(0);
//     };

//     const isSelected = (name: string) => selected.indexOf(name) !== -1;

//     // Avoid a layout jump when reaching the last page with empty rows.
//     const emptyRows =
//         page > 0 ? Math.max(0, (1 + page) * rowsPerPage - users.length) : 0;

//     return (
//         <Box sx={{ width: '100%' }}>
//             <Paper sx={{ width: '100%', mb: 2 }}>
//                 <EnhancedTableToolbar numSelected={selected.length} />
//                 <TableContainer>
//                     <Table
//                         sx={{ minWidth: 750 }}
//                         aria-labelledby="tableTitle"
//                     >
//                         <EnhancedTableHead
//                             numSelected={selected.length}
//                             order={order}
//                             orderBy={orderBy}
//                             onSelectAllClick={handleSelectAllClick}
//                             onRequestSort={handleRequestSort}
//                             rowCount={users.length}
//                         />
//                         <TableBody>
//                             {/* if you don't need to support IE11, you can replace the `stableSort` call with:
//               rows.slice().sort(getComparator(order, orderBy)) */}
//                             {stableSort(users, getComparator(order, orderBy))
//                                 .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
//                                 .map((row, index) => {
//                                     const isItemSelected = isSelected(row.id);
//                                     const labelId = `enhanced-table-checkbox-${index}`;

//                                     return (
//                                         <TableRow
//                                             hover
//                                             onClick={(event) => handleClick(event, row.id)}
//                                             role="checkbox"
//                                             aria-checked={isItemSelected}
//                                             tabIndex={-1}
//                                             key={row.id}
//                                             selected={isItemSelected}
//                                         >
//                                             <TableCell padding="checkbox">
//                                                 <Checkbox
//                                                     color="primary"
//                                                     checked={isItemSelected}
//                                                     inputProps={{
//                                                         'aria-labelledby': labelId,
//                                                     }}
//                                                 />
//                                             </TableCell>
//                                             <TableCell
//                                                 component="th"
//                                                 id={labelId}
//                                                 scope="row"
//                                                 padding="none"
//                                             >
//                                                 {row.name}
//                                             </TableCell>
//                                             <TableCell align="right">{row.calories}</TableCell>
//                                             <TableCell align="right">{row.fat}</TableCell>
//                                             <TableCell align="right">{row.carbs}</TableCell>
//                                             <TableCell align="right">{row.protein}</TableCell>
//                                         </TableRow>
//                                     );
//                                 })}
//                             {emptyRows > 0 && (
//                                 <TableRow
//                                     style={{
//                                         height: 53 * emptyRows,
//                                     }}
//                                 >
//                                     <TableCell colSpan={6} />
//                                 </TableRow>
//                             )}
//                         </TableBody>
//                     </Table>
//                 </TableContainer>
//                 <TablePagination
//                     rowsPerPageOptions={[5, 10, 25]}
//                     component="div"
//                     count={users.length}
//                     rowsPerPage={rowsPerPage}
//                     page={page}
//                     onPageChange={handleChangePage}
//                     onRowsPerPageChange={handleChangeRowsPerPage}
//                 />
//             </Paper>
//         </Box>
//     );
// }